local ModernUI = {}
ModernUI.__index = ModernUI

-- Constants
local COLORS = {
    Background = Color3.fromRGB(20, 20, 25),
    Primary = Color3.fromRGB(45, 45, 55),
    Secondary = Color3.fromRGB(35, 35, 45),
    Accent = Color3.fromRGB(0, 150, 255),
    Text = Color3.fromRGB(240, 240, 245),
    Subtext = Color3.fromRGB(180, 180, 190),
    Success = Color3.fromRGB(0, 200, 150),
    Warning = Color3.fromRGB(255, 175, 0),
    Error = Color3.fromRGB(255, 75, 75)
}

local CORNER_RADIUS = UDim.new(0, 12)
local ELEVATION_SHADOW = Color3.fromRGB(10, 10, 15)
local TRANSITION_TIME = 0.15
local EASE_STYLE = Enum.EasingStyle.Quint

-- Utility functions
local function createRoundedFrame(parent, size, position)
    local frame = Instance.new("Frame")
    frame.BackgroundColor3 = COLORS.Primary
    frame.Size = size or UDim2.new(1, 0, 1, 0)
    frame.Position = position or UDim2.new(0, 0, 0, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = CORNER_RADIUS
    corner.Parent = frame
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = ELEVATION_SHADOW
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.BackgroundTransparency = 1
    shadow.Parent = frame
    
    if parent then
        frame.Parent = parent
    end
    
    return frame
end

local function createTextLabel(parent, text, textSize)
    local label = Instance.new("TextLabel")
    label.Font = Enum.Font.GothamSemibold
    label.Text = text
    label.TextColor3 = COLORS.Text
    label.TextSize = textSize or 14
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Size = UDim2.new(1, 0, 0, label.TextSize + 4)
    label.Parent = parent
    
    return label
end

local function animateHoverEffect(button, isHovering)
    local targetColor = isHovering and COLORS.Accent or COLORS.Primary
    local targetTransparency = isHovering and 0.9 or 1
    
    local tweenInfo = TweenInfo.new(TRANSITION_TIME, EASE_STYLE, Enum.EasingDirection.Out)
    
    local tween1 = game:GetService("TweenService"):Create(button, tweenInfo, {
        BackgroundColor3 = targetColor
    })
    
    local tween2 = game:GetService("TweenService"):Create(button.Shadow, tweenInfo, {
        ImageTransparency = isHovering and 0.7 or 0.8
    })
    
    tween1:Play()
    tween2:Play()
end

-- Main Window
function ModernUI:CreateWindow(title)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ModernUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game:GetService("CoreGui")
    
    local mainFrame = createRoundedFrame(screenGui, UDim2.new(0, 400, 0, 500), UDim2.new(0.5, 0, 0.5, 0))
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    
    -- Header
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.BackgroundColor3 = COLORS.Secondary
    header.Size = UDim2.new(1, 0, 0, 48)
    header.Position = UDim2.new(0, 0, 0, 0)
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 12)
    headerCorner.Parent = header
    
    local titleLabel = createTextLabel(header, title, 18)
    titleLabel.Position = UDim2.new(0, 16, 0, 0)
    titleLabel.Size = UDim2.new(1, -32, 1, 0)
    titleLabel.TextColor3 = COLORS.Accent
    
    header.Parent = mainFrame
    
    -- Content container
    local content = Instance.new("ScrollingFrame")
    content.Name = "Content"
    content.BackgroundTransparency = 1
    content.Size = UDim2.new(1, -24, 1, -72)
    content.Position = UDim2.new(0, 12, 0, 60)
    content.ScrollBarThickness = 4
    content.ScrollBarImageColor3 = COLORS.Secondary
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Padding = UDim.new(0, 12)
    contentLayout.Parent = content
    
    content.Parent = mainFrame
    
    -- Store references
    self.screenGui = screenGui
    self.mainFrame = mainFrame
    self.content = content
    
    return self
end

-- Button element
function ModernUI:AddButton(text, callback)
    local button = createRoundedFrame(nil, UDim2.new(1, 0, 0, 42))
    button.Name = "Button"
    
    local buttonLabel = createTextLabel(button, text, 14)
    buttonLabel.TextColor3 = COLORS.Text
    buttonLabel.TextXAlignment = Enum.TextXAlignment.Center
    buttonLabel.Size = UDim2.new(1, 0, 1, 0)
    
    -- Hover effects
    button.MouseEnter:Connect(function()
        animateHoverEffect(button, true)
    end)
    
    button.MouseLeave:Connect(function()
        animateHoverEffect(button, false)
    end)
    
    -- Click effect
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local tween = game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {
                BackgroundTransparency = 0.2
            })
            tween:Play()
            tween.Completed:Wait()
            tween = game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
                BackgroundTransparency = 0
            })
            tween:Play()
        end
    end)
    
    button.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            pcall(callback)
        end
    end)
    
    button.Parent = self.content
    return button
end

-- Toggle element
function ModernUI:AddToggle(text, default, callback)
    local toggleContainer = Instance.new("Frame")
    toggleContainer.Name = "Toggle"
    toggleContainer.BackgroundTransparency = 1
    toggleContainer.Size = UDim2.new(1, 0, 0, 32)
    
    local label = createTextLabel(toggleContainer, text, 14)
    label.Size = UDim2.new(0.7, 0, 1, 0)
    
    local toggleFrame = createRoundedFrame(toggleContainer, UDim2.new(0, 50, 0, 28))
    toggleFrame.Position = UDim2.new(1, -50, 0, 2)
    toggleFrame.BackgroundColor3 = COLORS.Secondary
    
    local toggleCircle = createRoundedFrame(toggleFrame, UDim2.new(0, 24, 0, 24))
    toggleCircle.Position = default and UDim2.new(1, -26, 0.5, -12) or UDim2.new(0, 2, 0.5, -12)
    toggleCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleCircle.BackgroundColor3 = default and COLORS.Accent or COLORS.Subtext
    
    local isToggled = default or false
    
    local function updateToggle()
        local tween = game:GetService("TweenService"):Create(toggleCircle, TweenInfo.new(0.2, EASE_STYLE), {
            Position = isToggled and UDim2.new(1, -26, 0.5, -12) or UDim2.new(0, 2, 0.5, -12),
            BackgroundColor3 = isToggled and COLORS.Accent or COLORS.Subtext
        })
        tween:Play()
        pcall(callback, isToggled)
    end
    
    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isToggled = not isToggled
            updateToggle()
        end
    end)
    
    toggleContainer.Parent = self.content
    return toggleContainer
end

-- Slider element
function ModernUI:AddSlider(text, min, max, default, callback)
    local sliderContainer = Instance.new("Frame")
    sliderContainer.Name = "Slider"
    sliderContainer.BackgroundTransparency = 1
    sliderContainer.Size = UDim2.new(1, 0, 0, 60)
    
    local label = createTextLabel(sliderContainer, text, 14)
    label.Size = UDim2.new(1, 0, 0, 20)
    
    local valueLabel = createTextLabel(sliderContainer, tostring(default), 12)
    valueLabel.TextColor3 = COLORS.Subtext
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Position = UDim2.new(0, 0, 0, 20)
    valueLabel.Size = UDim2.new(1, 0, 0, 16)
    
    local sliderTrack = createRoundedFrame(sliderContainer, UDim2.new(1, 0, 0, 6))
    sliderTrack.Position = UDim2.new(0, 0, 0, 40)
    sliderTrack.BackgroundColor3 = COLORS.Secondary
    
    local sliderFill = createRoundedFrame(sliderTrack, UDim2.new(0, 0, 1, 0))
    sliderFill.BackgroundColor3 = COLORS.Accent
    
    local sliderHandle = createRoundedFrame(sliderTrack, UDim2.new(0, 16, 0, 16))
    sliderHandle.Position = UDim2.new(0, -8, 0.5, -8)
    sliderHandle.AnchorPoint = Vector2.new(0.5, 0.5)
    sliderHandle.BackgroundColor3 = COLORS.Accent
    sliderHandle.ZIndex = 2
    
    local function updateSlider(value)
        local normalized = math.clamp((value - min) / (max - min), 0, 1)
        sliderFill.Size = UDim2.new(normalized, 0, 1, 0)
        sliderHandle.Position = UDim2.new(normalized, -8, 0.5, -8)
        valueLabel.Text = tostring(math.floor(value * 100) / 100)
        pcall(callback, value)
    end
    
    local isDragging = false
    
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = game:GetService("Players").LocalPlayer:GetMouse().X
            local absolutePos = sliderTrack.AbsolutePosition.X
            local absoluteSize = sliderTrack.AbsoluteSize.X
            
            local normalized = math.clamp((mousePos - absolutePos) / absoluteSize, 0, 1)
            local value = min + (max - min) * normalized
            updateSlider(value)
        end
    end)
    
    updateSlider(default or min)
    
    sliderContainer.Parent = self.content
    return sliderContainer
end

-- Dropdown element
function ModernUI:AddDropdown(text, options, default, callback)
    local dropdownContainer = Instance.new("Frame")
    dropdownContainer.Name = "Dropdown"
    dropdownContainer.BackgroundTransparency = 1
    dropdownContainer.Size = UDim2.new(1, 0, 0, 32)
    dropdownContainer.ClipsDescendants = true
    
    local label = createTextLabel(dropdownContainer, text, 14)
    label.Size = UDim2.new(1, 0, 0, 32)
    
    local dropdownButton = createRoundedFrame(dropdownContainer, UDim2.new(0, 120, 0, 32))
    dropdownButton.Position = UDim2.new(1, -120, 0, 0)
    dropdownButton.BackgroundColor3 = COLORS.Secondary
    
    local buttonLabel = createTextLabel(dropdownButton, default or "Select", 14)
    buttonLabel.TextXAlignment = Enum.TextXAlignment.Center
    buttonLabel.Size = UDim2.new(1, -32, 1, 0)
    
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Image = "rbxassetid://71659683"
    arrow.ImageColor3 = COLORS.Subtext
    arrow.Rotation = 180
    arrow.BackgroundTransparency = 1
    arrow.Size = UDim2.new(0, 16, 0, 16)
    arrow.Position = UDim2.new(1, -24, 0.5, -8)
    arrow.AnchorPoint = Vector2.new(0.5, 0.5)
    arrow.Parent = dropdownButton
    
    local dropdownList = createRoundedFrame(dropdownContainer, UDim2.new(0, 120, 0, 0))
    dropdownList.Position = UDim2.new(1, -120, 0, 36)
    dropdownList.BackgroundColor3 = COLORS.Secondary
    dropdownList.Visible = false
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 4)
    listLayout.Parent = dropdownList
    
    local isOpen = false
    
    local function toggleDropdown()
        isOpen = not isOpen
        
        local tweenInfo = TweenInfo.new(0.2, EASE_STYLE)
        
        if isOpen then
            dropdownList.Visible = true
            local targetSize = math.min(#options * 36, 180) -- Max height of 180
            game:GetService("TweenService"):Create(dropdownList, tweenInfo, {
                Size = UDim2.new(0, 120, 0, targetSize)
            }):Play()
            game:GetService("TweenService"):Create(arrow, tweenInfo, {
                Rotation = 0
            }):Play()
        else
            game:GetService("TweenService"):Create(dropdownList, tweenInfo, {
                Size = UDim2.new(0, 120, 0, 0)
            }):Play()
            game:GetService("TweenService"):Create(arrow, tweenInfo, {
                Rotation = 180
            }):Play()
            task.delay(0.2, function()
                dropdownList.Visible = false
            end)
        end
    end
    
    dropdownButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggleDropdown()
        end
    end)
    
    for _, option in ipairs(options) do
        local optionButton = createRoundedFrame(dropdownList, UDim2.new(1, -8, 0, 32))
        optionButton.Position = UDim2.new(0, 4, 0, 0)
        optionButton.BackgroundColor3 = COLORS.Primary
        
        local optionLabel = createTextLabel(optionButton, option, 14)
        optionLabel.TextXAlignment = Enum.TextXAlignment.Center
        optionLabel.Size = UDim2.new(1, 0, 1, 0)
        
        optionButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                buttonLabel.Text = option
                toggleDropdown()
                pcall(callback, option)
            end
        end)
        
        optionButton.MouseEnter:Connect(function()
            animateHoverEffect(optionButton, true)
        end)
        
        optionButton.MouseLeave:Connect(function()
            animateHoverEffect(optionButton, false)
        end)
    end
    
    dropdownContainer.Parent = self.content
    return dropdownContainer
end

-- Close the UI
function ModernUI:Destroy()
    if self.screenGui then
        self.screenGui:Destroy()
    end
end

return ModernUI
